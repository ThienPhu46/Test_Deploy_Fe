import React, { useState } from 'react';
import '../../Design_Css/Admin/CustomerManager.css';
import Sidebar from '../../Components/Admin/Sliderbar';

const CustomerManagement = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [newCustomer, setNewCustomer] = useState({
    name: '',
    citizenId: '',
    phone: '',
    city: '',
    gender: '',
    nationality: ''
  });
  const [showLogoutConfirm, setShowLogoutConfirm] = useState(false);
  const [showSaveConfirm, setShowSaveConfirm] = useState(false);
  const [showAddSuccess, setShowAddSuccess] = useState(false); // Th√¥ng b√°o th√™m th√†nh c√¥ng
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);
  const [customerToDelete, setCustomerToDelete] = useState(null);

  const customers = [
    { id: 1, name: 'V≈© VƒÉn Ph√∫', citizenId: '182731928733', phone: '0123456789', city: 'Bi√™n H√≤a', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 2, name: 'Tr·∫ßn Th·ªã B√≠ch H·∫°nh', citizenId: '13146789012', phone: '0912345678', city: 'H√† N·ªôi', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 3, name: 'L√™ VƒÉn H√πng', citizenId: '234567890123', phone: '0987654321', city: 'TP. HCM', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 4, name: 'Nguy·ªÖn Minh Trang', citizenId: '234567890123', phone: '0909090909', city: 'ƒê√† N·∫µng', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 5, name: 'Ph·∫°m Qu·ªëc H·∫°nh', citizenId: '456789012345', phone: '093311222', city: 'C·∫ßn Th∆°', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 6, name: 'H·ªì Th·ªã Thu H∆∞∆°ng', citizenId: '567890123456', phone: '0977998888', city: 'Hu·∫ø', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 7, name: 'ƒê·∫∑ng Minh T√¢m', citizenId: '678901234567', phone: '0911222333', city: 'H·∫£i Ph√≤ng', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 8, name: 'V√µ Ng·ªçc Mai', citizenId: '789012345678', phone: '0966554444', city: 'Nha Trang', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 9, name: 'Nguy·ªÖn VƒÉn Quang', citizenId: '890123456789', phone: '0944433222', city: 'Gia Lai', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 10, name: 'L√™ Th·ªã Kim Ng√¢n', citizenId: '901234567890', phone: '0922110000', city: 'B√¨nh D∆∞∆°ng', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 11, name: 'Tr·∫ßn Nh·∫≠t H√†o', citizenId: '12345678901', phone: '0900222111', city: 'T√¢y Ninh', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 12, name: 'Mai Th·ªã ƒêi·ªÉm My', citizenId: '223456789012', phone: '0888110000', city: 'Qu·∫£ng Nam', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 13, name: 'Phan VƒÉn L·ª£i', citizenId: '334567890123', phone: '0933556666', city: 'ƒê·ªìng Nai', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 14, name: 'B√πi Th·ªã Thanh Th·∫£o', citizenId: '445678901234', phone: '0977334444', city: 'V≈©ng T√†u', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 15, name: 'Nguy·ªÖn ƒê·ª©c T√†i', citizenId: '556789012345', phone: '0911445555', city: 'B·∫øn Tre', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 16, name: 'V≈© Th·ªã H·ªìng Nhung', citizenId: '667890123456', phone: '0966778889', city: 'Ki√™n Giang', gender: 'N·ªØ', nationality: 'Vi·ªát Nam' },
    { id: 17, name: 'L√¢m VƒÉn Kh√¥i', citizenId: '778901234567', phone: '0900112222', city: 'Ph√∫ Y√™n', gender: 'Nam', nationality: 'Vi·ªát Nam' },
    { id: 18, name: 'Tr·∫ßn Gia Huy', citizenId: '889012345678', phone: '0944002211', city: 'B·∫Øc Ninh', gender: 'Nam', nationality: 'Vi·ªát Nam' },
  ];

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleEdit = (id) => {
  const customer = customers.find((c) => c.id === id);
  setSelectedCustomer(customer);
  setShowDetailsModal(true);
  };
  const filteredCustomers = customers.filter((customer) =>
    customer.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleDelete = (id) => {
    const customer = customers.find((c) => c.id === id);
    setCustomerToDelete(customer);
    setShowDeleteConfirm(true);
  };

  const handleConfirmDelete = () => {
    console.log(`X√≥a kh√°ch h√†ng ${customerToDelete.id}`);
    setShowDeleteConfirm(false);
    setShowDeleteSuccess(true);
  };

  const handleAddCustomer = () => {
    setNewCustomer({
      name: '',
      citizenId: '',
      phone: '',
      city: '',
      gender: '',
      nationality: ''
    });
    setSelectedCustomer(null);
    setShowDetailsModal(true);
  };

  const handleSave = () => {
    if (selectedCustomer) {
      console.log('L∆∞u th√¥ng tin kh√°ch h√†ng:', selectedCustomer);
    } else {
      console.log('Th√™m kh√°ch h√†ng m·ªõi:', newCustomer);
      setShowAddSuccess(true); // Hi·ªÉn th·ªã th√¥ng b√°o th√™m th√†nh c√¥ng
    }
    setShowDetailsModal(false);
    setShowSaveConfirm(true);
  };

  const handleCancel = () => {
    setShowDetailsModal(false);
    setSelectedCustomer(null);
    setNewCustomer({
      name: '',
      citizenId: '',
      phone: '',
      city: '',
      gender: '',
      nationality: ''
    });
  };

  return (
    <div className="cm-main-container">
      <Sidebar 
        isSidebarOpen={isSidebarOpen} 
        toggleSidebar={toggleSidebar} 
        onLogoutClick={() => setShowLogoutConfirm(true)} 
      />
      <div className="top-header">
        <div className="top-title-container">
          <div className="menu-icon" onClick={toggleSidebar}>‚ò∞</div>
          <div className="top-title">Qu·∫£n L√Ω Kh√°ch H√†ng</div>
        </div>
        <div className="more-icon" onClick={() => console.log('M·ªü t√πy ch·ªçn b·ªï sung')}>‚ãÆ</div>
      </div>

      <div className="cm-content-wrapper">
        <div className="cm-search-add-section">
          <div className="cm-search-box">
            <span className="cm-search-icon">üîç</span>
            <input
              type="text"
              placeholder="T√¨m theo t√™n kh√°ch h√†ng"
              value={searchTerm}
              onChange={handleSearch}
            />
          </div>
          <button className="cm-add-customer-btn" onClick={handleAddCustomer}>
            Th√™m kh√°ch h√†ng
          </button>
        </div>

        <div className="cm-table-container">
          <table className="cm-customer-table">
            <thead>
              <tr>
                <th>M√£ kh√°ch h√†ng</th>
                <th>H·ªç v√† t√™n</th>
                <th>CƒÉn c∆∞·ªõc c√¥ng d√¢n</th>
                <th>S·ªë ƒëi·ªán tho·∫°i</th>
                <th>ƒê·ªãa ch·ªâ</th>
                <th>Gi·ªõi t√≠nh</th>
                <th>Qu·ªëc t·ªãch</th>
                <th>S·ª≠a</th>
                <th>X√≥a</th>
              </tr>
            </thead>
            <tbody>
              {filteredCustomers.map((customer) => (
                <tr key={customer.id}>
                  <td>{customer.id}</td>
                  <td>{customer.name}</td>
                  <td>{customer.citizenId}</td>
                  <td>{customer.phone}</td>
                  <td>{customer.city}</td>
                  <td>{customer.gender}</td>
                  <td>{customer.nationality}</td>
                  <td>
                    <button className="cm-edit-btn" onClick={() => handleEdit(customer.id)}>
                      <span className="cm-edit-icon">‚úèÔ∏è</span>
                    </button>
                  </td>
                  <td>
                    <button
                      className="cm-delete-btn"
                      onClick={() => handleDelete(customer.id)}
                    >
                      <span className="cm-delete-icon">üóëÔ∏è</span>
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {showDetailsModal && (
        <div className="cm-modal-overlay">
          <div className="cm-modal-wrapper">
            <h2 className="cm-modal-title">{selectedCustomer ? `S·ª≠a kh√°ch h√†ng ${selectedCustomer.id}` : 'Th√™m kh√°ch h√†ng'}</h2>
            <div className="cm-modal-content">
              <div className="cm-form-container">
                <div className="cm-form-field">
                  <span className="cm-field-icon">üë§</span>
                  <input
                    type="text"
                    placeholder="H·ªç v√† t√™n kh√°ch h√†ng"
                    value={selectedCustomer ? selectedCustomer.name : newCustomer.name}
                    onChange={(e) => {
                      if (selectedCustomer) {
                        setSelectedCustomer({ ...selectedCustomer, name: e.target.value });
                      } else {
                        setNewCustomer({ ...newCustomer, name: e.target.value });
                      }
                    }}
                    className="cm-input-field"
                  />
                </div>
                <div className="cm-form-field">
                  <span className="cm-field-icon">‚ö•</span>
                  <select
                    value={selectedCustomer ? selectedCustomer.gender : newCustomer.gender}
                    onChange={(e) => {
                      if (selectedCustomer) {
                        setSelectedCustomer({ ...selectedCustomer, gender: e.target.value });
                      } else {
                        setNewCustomer({ ...newCustomer, gender: e.target.value });
                      }
                    }}
                    className="cm-select-field"
                  >
                    <option value="" disabled>Gi·ªõi t√≠nh</option>
                    <option value="Nam">Nam</option>
                    <option value="N·ªØ">N·ªØ</option>
                    <option value="Kh√°c">Kh√°c</option>
                  </select>
                </div>
                <div className="cm-form-field">
                  <span className="cm-field-icon">ü™™</span>
                  <div className="cm-input-with-length">
                    <input
                      type="text"
                      placeholder="Nh·∫≠p CCCD"
                      value={selectedCustomer ? selectedCustomer.citizenId : newCustomer.citizenId}
                      onChange={(e) => {
                        if (selectedCustomer) {
                          setSelectedCustomer({ ...selectedCustomer, citizenId: e.target.value });
                        } else {
                          setNewCustomer({ ...newCustomer, citizenId: e.target.value });
                        }
                      }}
                      className="cm-input-field"
                      maxLength="12"
                    />
                    <span className="cm-field-length">{(selectedCustomer ? selectedCustomer.citizenId : newCustomer.citizenId).length}/12</span>
                  </div>
                </div>
                <div className="cm-form-field">
                  <span className="cm-field-icon">üìû</span>
                  <div className="cm-input-with-length">
                    <input
                      type="text"
                      placeholder="Nh·∫≠p SƒêT"
                      value={selectedCustomer ? selectedCustomer.phone : newCustomer.phone}
                      onChange={(e) => {
                        if (selectedCustomer) {
                          setSelectedCustomer({ ...selectedCustomer, phone: e.target.value });
                        } else {
                          setNewCustomer({ ...newCustomer, phone: e.target.value });
                        }
                      }}
                      className="cm-input-field"
                      maxLength="10"
                    />
                    <span className="cm-field-length">{(selectedCustomer ? selectedCustomer.phone : newCustomer.phone).length}/10</span>
                  </div>
                </div>
                <div className="cm-form-field">
                  <span className="cm-field-icon">üìç</span>
                  <input
                    type="text"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                    value={selectedCustomer ? selectedCustomer.city : newCustomer.city}
                    onChange={(e) => {
                      if (selectedCustomer) {
                        setSelectedCustomer({ ...selectedCustomer, city: e.target.value });
                      } else {
                        setNewCustomer({ ...newCustomer, city: e.target.value });
                      }
                    }}
                    className="cm-input-field"
                  />
                </div>
                <div className="cm-form-field">
                  <span className="cm-field-icon">üåê</span>
                  <input
                    type="text"
                    placeholder="Nh·∫≠p qu·ªëc t·ªãch"
                    value={selectedCustomer ? selectedCustomer.nationality : newCustomer.nationality}
                    onChange={(e) => {
                      if (selectedCustomer) {
                        setSelectedCustomer({ ...selectedCustomer, nationality: e.target.value });
                      } else {
                        setNewCustomer({ ...newCustomer, nationality: e.target.value });
                      }
                    }}
                    className="cm-input-field"
                  />
                </div>
              </div>
            </div>
            <div className="cm-modal-actions">
              <button className="cm-save-btn" onClick={handleSave}>L∆∞u</button>
              <button className="cm-cancel-btn" onClick={handleCancel}>H·ªßy b·ªè</button>
            </div>
          </div>
        </div>
      )}
      {showLogoutConfirm && (
        <div className="logout-modal">
          <div className="logout-modal-content">
            <span className="close-icon" onClick={() => setShowLogoutConfirm(false)}>X</span>
            <div className="logout-modal-header">
              <span className="header-text">Th√¥ng B√°o</span>
            </div>
            <p className="logout-message">B·∫°n c√≥ mu·ªën ƒëƒÉng xu·∫•t?</p>
            <div className="logout-modal-buttons">
              <button className="confirm-button" onClick={() => setShowLogoutConfirm(false)}>
                YES
              </button>
              <button className="cancel-button" onClick={() => setShowLogoutConfirm(false)}>
                NO
              </button>
            </div>
          </div>
        </div>
      )}
      {showSaveConfirm && (
        <div className="logout-modal">
          <div className="logout-modal-content">
            <span className="close-icon" onClick={() => setShowSaveConfirm(false)}>X</span>
            <div className="logout-modal-header">
              <span className="header-text">Th√¥ng B√°o</span>
            </div>
            {showAddSuccess ? (
              <p className="logout-message">Th√™m kh√°ch h√†ng th√†nh c√¥ng!</p>
            ) : (
              <p className="logout-message">S·ª≠a th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng!</p>
            )}
            <div className="logout-modal-buttons">
              <button className="confirm-button" onClick={() => {
                setShowSaveConfirm(false);
                setShowAddSuccess(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i th√¥ng b√°o
              }}>
                OK
              </button>
            </div>
          </div>
        </div>
      )}
      {showDeleteConfirm && customerToDelete && (
        <div className="logout-modal">
          <div className="logout-modal-content">
            <span className="close-icon" onClick={() => setShowDeleteConfirm(false)}>X</span>
            <div className="logout-modal-header">
              <span className="header-text">Th√¥ng B√°o</span>
            </div>
            <p className="logout-message">B·∫°n c√≥ th·ª±c s·ª± mu·ªën x√≥a {customerToDelete.name}?</p>
            <div className="logout-modal-buttons">
              <button className="confirm-button" onClick={handleConfirmDelete}>
                YES
              </button>
              <button className="cancel-button" onClick={() => setShowDeleteConfirm(false)}>
                NO
              </button>
            </div>
          </div>
        </div>
      )}
      {showDeleteSuccess && (
        <div className="logout-modal">
          <div className="logout-modal-content">
            <span className="close-icon" onClick={() => setShowDeleteSuccess(false)}>X</span>
            <div className="logout-modal-header">
              <span className="header-text">Th√¥ng B√°o</span>
            </div>
            <p className="logout-message">X√≥a th√†nh c√¥ng!</p>
            <div className="logout-modal-buttons">
              <button className="confirm-button" onClick={() => setShowDeleteSuccess(false)}>
                OK
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CustomerManagement;